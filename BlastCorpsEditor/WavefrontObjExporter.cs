using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;

namespace BlastCorpsEditor
{
   class WavefrontObjExporter
   {
      public static bool ExportTerrain(List<TerrainGroup> terrain, string filename, float scale)
      {
         using (System.IO.StreamWriter file = new System.IO.StreamWriter(filename))
         {
            int count = 0;
            int vertCount = 1;
            file.WriteLine(fileHeader());
            file.WriteLine("mtllib blast_corps_terrain.mtl");
            foreach (TerrainGroup tg in terrain)
            {
               file.WriteLine("g Terrain" + count);
               foreach (TerrainTri tri in tg.triangles)
               {
                  file.WriteLine("usemtl Terrain" + tri.b12);
                  file.WriteLine(toObjVert(tri.x1, tri.y1, tri.z1, scale));
                  file.WriteLine(toObjVert(tri.x2, tri.y2, tri.z2, scale));
                  file.WriteLine(toObjVert(tri.x3, tri.y3, tri.z3, scale));
                  file.WriteLine("f " + vertCount + " " + (vertCount + 1) + " " + (vertCount + 2));
                  vertCount += 3;
               }
               count++;
            }
         }
         return true;
      }

      public static bool ExportCollision(List<CollisionGroup> collision, string filename, float scale)
      {
         using (System.IO.StreamWriter file = new System.IO.StreamWriter(filename))
         {
            int count = 0;
            int vertCount = 1;
            file.WriteLine(fileHeader());
            file.WriteLine("mtllib blast_corps_collision.mtl");
            foreach (CollisionGroup cg in collision)
            {
               file.WriteLine("g Collision" + count);
               foreach (CollisionTri tri in cg.triangles)
               {
                  file.WriteLine("usemtl Collision" + tri.b14);
                  file.WriteLine(toObjVert(tri.x1, tri.y1, tri.z1, scale));
                  file.WriteLine(toObjVert(tri.x2, tri.y2, tri.z2, scale));
                  file.WriteLine(toObjVert(tri.x3, tri.y3, tri.z3, scale));
                  file.WriteLine("f " + vertCount + " " + (vertCount + 1) + " " + (vertCount + 2));
                  vertCount += 3;
               }
               count++;
            }
         }
         return true;
      }

      public static bool ExportCollision(List<Collision24> collision, string filename, float scale)
      {
         using (System.IO.StreamWriter file = new System.IO.StreamWriter(filename))
         {
            int vertCount = 1;
            file.WriteLine(fileHeader());
            file.WriteLine("mtllib blast_corps_collision.mtl");
            foreach (Collision24 tri in collision)
            {
               file.WriteLine("usemtl Collision" + tri.type);
               file.WriteLine(toObjVert(tri.x1, tri.y1, tri.z1, scale));
               file.WriteLine(toObjVert(tri.x2, tri.y2, tri.z2, scale));
               file.WriteLine(toObjVert(tri.x3, tri.y3, tri.z3, scale));
               file.WriteLine("f " + vertCount + " " + (vertCount + 1) + " " + (vertCount + 2));
               vertCount += 3;
            }
         }
         return true;
      }

      private static string toObjVert(int x, int y, int z, float scale)
      {
         float fx, fy, fz;
         fx = (float)x / scale;
         fy = (float)y / scale;
         fz = (float)z / scale;
         return "v " + fx + " " + fy + " " + fz;
      }

      private static string fileHeader()
      {
         var appName = "Blast Corps Editor";
         var version = FileVersionInfo.GetVersionInfo(Assembly.GetEntryAssembly().Location).ProductVersion;
         return "# Generated by " + appName + " v" + version;
      }
   }
}
